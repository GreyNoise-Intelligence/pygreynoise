{% import "macros.txt.j2" as macros with context %}
{% for ip_context in results -%}
{% if ip_context.ip %}

          <header>IP Similarity Source</header>
          --------------------
<key>IP</key>: <value>{{ ip_context.ip.ip }}</value>
<key>Actor</key>: <value>{{ ip_context.ip.actor }}</value>
<key>Classification</key>: {{ macros.classification(ip_context.ip.classification) }}
<key>First Seen</key>: <value>{{ ip_context.ip.first_seen }}</value>
<key>Last Seen</key>: <value>{{ ip_context.ip.last_seen }}</value>
<key>ASN</key>: <value>{{ ip_context.ip.asn }}</value>
<key>City</key>: <value>{{ ip_context.ip.city }}</value>
<key>Country</key>: <value>{{ ip_context.ip.country }}</value>
<key>Country Code</key>: <value>{{ ip_context.ip.country_code }}</value>
<key>Organization</key>: <value>{{ ip_context.ip.organization }}</value>
<key>Total</key>: {{ ip_context.total }}

          <header>IP Similarity - Top 5 Results</header>
          -----------------------------
{% for ip_sim in ip_context.similar_ips[:5] %}
<key>IP</key>: <value>{{ ip_sim.ip }}</value>
<key>Score</key>: <value>{{ ip_sim.score }}</value>
{%- if ip_sim.features %}
<key>Feature Matches</key>:
{%- call(feature) macros.verbose_list(ip_sim.features) -%}
<value>- {{ feature }}</value>
{% endcall -%}
{% endif %}
{%- endfor %}
{%- endif %}
{%- endfor %}
